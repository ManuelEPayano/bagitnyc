# The purpose of this python script is acquire hashtag data from Instagram by making an API call. 

# The immediate goal is to acquire more data than the default 20 entries returned 


# Instagram's public API has a Python client, you'll first need to install it in command line

# follow the instructions here: https://github.com/Instagram/python-instagram

# you may need additional installations for this client to work, make sure to install all requirements as per instructions



## once installation complete, import it for use in the script.
import exceptions

from cartodb import CartoDBAPIKey, CartoDBException

from instagram.client import InstagramAPI

# this is to allow updates/edits/inserts to CartoDB tables, where we'll be storing hashtag data
MY_API_KEY = '700987471291d9c006a998b500f23de243f7388a'
MY_CARTODB_DOMAIN = 'jossphilippe'

#MY_API_KEY = 'insert here'
#MY_CARTODB_DOMAIN = 'insert here''

cl = CartoDBAPIKey(MY_API_KEY, MY_CARTODB_DOMAIN)


def insert_into_cartodb(sql_query):
    try:
       # your CartoDB account:
        print cl.sql(sql_query)
    except CartoDBException as e:
        print ("some error ocurred", e)

# this is the complete API call function, where we successfully acquire data from Instagram
#
def Instagram_API():
    
    # this part authenticates our use of the API
    # you can register a client here: https://instagram.com/developer/clients/manage/
    

    # and enter your credentials here
#    MY_CLIENT_ID = 'insert_here'
    MY_CLIENT_ID = 'edf88a2a6fa94c9889e9800db8317f68'
#edf88a2a6fa94c9889e9800db8317f68
#    MY_CLIENT_SECRET = 'insert here'
    MY_CLIENT_SECRET = '73975e1a5b674c8e961568c463f3a8ec'

    api = InstagramAPI(client_id = MY_CLIENT_ID, client_secret = MY_CLIENT_SECRET)
    
    # create an array that stores our API output data, call this what you wish
    output = []
    
    # choose a hashtag
    HASHTAG = 'diversityintech'

    # choose the number of pages of data to generate 
    MAX_PAGES = 1
    
    # make API call
    for page in api.tag_recent_media(tag_name = HASHTAG, as_generator = True,
                                     max_pages = MAX_PAGES):
        # open the page and push its contents onto our data array
        output += page[0]
        
    # return/save data
    return output


# We'll use this function to update our CartoDB table
#MY_CARTODB_TABLE = 'insert here'

#MY_CARTODB_TABLE = 'test_api'


def create_sql_statement(x, y, link, media_credit, media_id, url, created_time):
    # Start with a basic INSERT statement
    # -> Don't forget to replace with your table name
#    sql_query = 'INSERT INTO instagram_media (the_geom, link, media_credit, media_id, url, created_time) VALUES ('
    sql_query = 'INSERT INTO instagram_api (the_geom, link, media_credit, media_id, url, created_time) VALUES ('

    # Add our values to the statement, making sure that we wrap string values
    # in quotes
    # 4/8, EB: Fixed bug on next line that rounded x/y down to very low
    # precision
    sql_query = sql_query + "'SRID=4326; POINT (%f %f)', '%s', '%s', '%s', '%s', '%s'" % (x, y, link, media_credit, media_id, url, created_time)
    sql_query = sql_query + ')'
    return sql_query


# At this point, we're able to acquie Instagram data by the pages. But to map it, we only really need those rows of data with geolocation. 
# We can filter the data we've already acquired by setting conditions for the ones to keep, our

#if __name__ == '__main__':
#
#    for media in Instagram_API():
#        try:
#            # ONLY look at pieces of media with a location, you can change this to another condition. 
#            if media.location:
#                
#                instagram_data = (
#                    media.location.point.longitude,
#                    media.location.point.latitude,
#                    media.images['standard_resolution'].url,
#                    media.user.username,
#                    media.id,
#                    media.link,
#                    media.created_time
#                )
#                
#                # print our filtered selection of instagram_data
#                print(instagram_data)
#
#
#        except exceptions.AttributeError:
#            pass

if __name__ == '__main__':
    #
    # For each row in whatever is returned from get_data(), create an SQL
    # INSERT statement for that data, then insert it into CartoDB.
    #
    for media in Instagram_API():
        try:
            # ONLY look at pieces of media with a location
            if media.location:
                sql_query = create_sql_statement(
                    media.location.point.longitude,
                    media.location.point.latitude,
                    media.images['standard_resolution'].url,
                    media.user.username,
                    media.id,
                    media.link,
                    media.created_time
                )
                print(sql_query)

                # This is where you call insert_into_cartodb()
                insert_into_cartodb(sql_query)
        except exceptions.AttributeError:
            pass
